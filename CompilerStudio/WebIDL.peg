start = WS* Definitions* WS*

Definitions = ExtendedAttributeList* WS* Definition

// [2] Definition
Definition = Typedef

// [24] Typedef
Typedef = 'typedef' ExtendedAttributeList* WS* Type WS+ identifier WS* ';'

// ExtendedAttributeList = '[' ExtendedAttribute ExtendedAttributes* ']'
ExtendedAttributeList = '[' WS* ']'

/*
ExtendedAttributes = ',' ExtendedAttribute

ExtendedAttribute = "(" ExtendedAttributeInner ")" ExtendedAttributeRest? /
    Other ExtendedAttributeRest?

ExtendedAttributeRest = ExtendedAttribute
*/

Other = integer / float / identifier / string / other / '-' / '.' /
    '...' / ':' / ';' / '<' / '=' / '.' / '?' / 'Date' / 'DOMString' /
    'Infinity' / 'NaN' / 'any' / 'boolean' / 'byte' / 'double' / 'false' /
    'float' / 'long' / 'null' / 'object' / 'octet' / 'or' / 'optional' /
    'sequence' / 'short' / 'true' / 'unsigned' / 'void' / ArgumentNameKeyword

ArgumentNameKeyword = 'attribute' / 'callback' / 'const' / 'creator' /
    'deleter' / 'dictionary' / 'enum' / 'exception' / 'getter' / 'implements' /
    'inherit' / 'interface' / 'legacycaller' / 'partial' / 'setter' /
    'static' / 'stringifier' / 'typedef' / 'unrestricted'


// [57] Type
Type = SingleType

// [58] SingleType
SingleType = NonAnyType

// [62] NonAnyType
NonAnyType = PrimitiveType TypeSuffix?

// [64] PrimitiveType
PrimitiveType = UnsignedIntegerType / UnrestrictedFloatType / 'boolean' / 'byte' / 'octet'

// [65] UnrestrictedFloatType
UnrestrictedFloatType = 'unrestricted' WS+ FloatType / FloatType

// [66] FloatType
FloatType = 'float' / 'double'

// [67] UnsignedIntegerType
UnsignedIntegerType = 'unsigned' WS+ IntegerType / IntegerType

// [68] IntegerType
IntegerType = 'short' / 'long' (WS+ 'long')?

// [69] OptionaLong unused

// [70] TypeSuffix
TypeSuffix = '[]'

WS = SingleLineComment / MultiLineComment / ws

SingleLineComment = '//' [^\n]* [\n] { return ""; }

MultiLineComment = '/*' ([^*] / [*] ![/])* '*/' { return ""; }

ws = [ \r\n\t] { return ""; }

identifier = [A-Z_a-z] [0-9A-Z_a-z]*

string = '"' [^"]* '"'

integer = decimal / hex / octal

octal = negative:'-'? '0' [0-7]*

hex = negative:'-'? '0' [Xx] [0-9A-Fa-f]+

decimal = negative:'-'? [1-9][0-9]*

float = negative:'-'? [0-9]* '.' [0-9]+

other = [^\t\n\r 0-9A-Z_a-z]